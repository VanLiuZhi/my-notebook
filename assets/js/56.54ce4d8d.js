(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{507:function(t,s,e){"use strict";e.r(s);var a=e(1),n=Object(a.a)({},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"django-相关"}},[t._v("Django 相关")]),t._v(" "),t._m(0),t._v(" "),e("p",[t._v("对文档阅读的大致补充，框架拥有功能的概述，详细内容查阅文档。")]),t._v(" "),e("p",[t._v("在使用前后端分离的项目中，模版相关的内容基本没什么用了，对于Django如果不是快速开发的应用，基本也不用它提供的功能（认证，表单等），使用较多的有中间件，URL到视图响应，ORM，个人认为扩展ORM开发一套自己的框架很有实战意义，你可以做一个自己风格的ORM，实现像只完成模型定义，就拥有对模型进行增加(Create)、读取查询(Retrieve)、更新(Update)和删除(Delete)的能力。")]),t._v(" "),e("p",[t._v("如此，你便迭代出一个非常适合自己的框架，相信大公司都会有自己的一套迭代框架，用于快速开发产品。")]),t._v(" "),e("h2",{attrs:{id:"session"}},[t._v("session")]),t._v(" "),e("p",[t._v("session是一种常用的web技术，在Django框架中很容易去使用它。")]),t._v(" "),e("h3",{attrs:{id:"session-概念"}},[t._v("session 概念")]),t._v(" "),t._m(1),t._v(" "),e("p",[t._v("网站保存登录账号和密码是由本地的Cookie来实现的。")]),t._v(" "),t._m(2),t._v(" "),e("h3",{attrs:{id:"工作流程"}},[t._v("工作流程")]),t._v(" "),e("p",[t._v("session是要浏览器这边配合Cookie来实现的，所以浏览器不能禁用cookie：")]),t._v(" "),t._m(3),t._v(" "),e("h3",{attrs:{id:"代码流程（在默认配置下）"}},[t._v("代码流程（在默认配置下）")]),t._v(" "),t._m(4),t._v(" "),e("h3",{attrs:{id:"session序列化-框架文档有讲解"}},[t._v("session序列化(框架文档有讲解)")]),t._v(" "),e("p",[t._v("session的数据会被序列化保存在数据库中，默认是json，一般不需要改，由于是json，所以数据创建的键最好是字符串，数据要能被json编码，你不能直接把一个对象设置在session的键值对当中。")]),t._v(" "),e("p",[t._v("如果想保存更高级的格式，就需要自己实现序列化程序。（从数据库的数据来看，存储的并不是是序列字符串，是一定规则化的字母，猜测是为了压缩数据，s.get_decoded()可以得到解码的结果）")]),t._v(" "),e("h3",{attrs:{id:"会话对象准则"}},[t._v("会话对象准则")]),t._v(" "),t._m(5),t._v(" "),e("h3",{attrs:{id:"扩展"}},[t._v("扩展")]),t._v(" "),e("p",[t._v("session 就是用来在后端，为了给无状态的HTTP协议提供识别（用户识别），扩展它是很重要的。比如我们不依赖cookie，而是每次都传递一个id，后端用这个id自己创建session，然后前端每次请求都带这个ID，这样后端中间件每次都通过ID查询数据库，赋值request.session")]),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),e("HightCode",[[t._v("\nfrom importlib import import_module\nfrom django.conf import settings\nSessionStore = import_module(settings.SESSION_ENGINE).SessionStore\n")]],2),t._v(" "),e("h3",{attrs:{id:"安全"}},[t._v("安全")]),t._v(" "),t._m(9),t._v(" "),e("p",[t._v("遇到这个问题时：")]),t._v(" "),t._m(10),t._v(" "),e("p",[t._v("该地址有讲解，不过这个问题应该是出现在开发阶段的调试中，如果出现了问题可以清除浏览器数据来解决，一劳永逸的方案（还没看，链接在下面）不一定需要。\n"),e("a",{attrs:{href:"https://stackoverflow.com/questions/42211065/django-memcached-error-the-requests-session-was-deleted-before-the-request-c",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://stackoverflow.com/questions/42211065/django-memcached-error-the-requests-session-was-deleted-before-the-request-c"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"密码加密"}},[t._v("密码加密")]),t._v(" "),e("p",[t._v("框架提供了密码加密功能，该部分讲解了密码如何存储，密码升级，密码验证，管理密码。")]),t._v(" "),e("p",[t._v("密码存储暂时没看。")]),t._v(" "),e("p",[t._v("密码升级有从下一版本升级到新版本的时候，使用新的算法，和对所有需要升级的一次处理，具体参考文档。")]),t._v(" "),e("p",[t._v("除了框架的自己提供的，还可以使用自己编写的算法进行加密")]),t._v(" "),e("p",[t._v("手动管理密码：包括几个函数，对密码进行加密得到加密的结果，这个用来保存在数据库，验证密码，把明文密码和数据库存储的加密密码进行验证，返回布尔值。")]),t._v(" "),e("p",[t._v("密码验证：控制用户输入的密码，避免太简单，例如用户的密码输入6为，验证规则是9位那么验证不通过。")]),t._v(" "),e("p",[t._v("配置文件：")]),t._v(" "),e("HightCode",[[t._v("\n# 密码加密使用的算法\n# 列表的第一个元素 (即settings.PASSWORD_HASHERS[0]) 会用于储存密码，\n# 所有其它元素都是用于验证的哈希值，它们可以用于检查现有的密码。\nPASSWORD_HASHERS = [\n    'django.contrib.auth.hashers.PBKDF2PasswordHasher',\n    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',\n    'django.contrib.auth.hashers.Argon2PasswordHasher',\n    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',\n    'django.contrib.auth.hashers.BCryptPasswordHasher',\n    'django.contrib.auth.hashers.SHA1PasswordHasher',\n    'django.contrib.auth.hashers.MD5PasswordHasher',\n    'django.contrib.auth.hashers.UnsaltedSHA1PasswordHasher',\n    'django.contrib.auth.hashers.UnsaltedMD5PasswordHasher',\n    'django.contrib.auth.hashers.CryptPasswordHasher',\n]\n")]],2),t._v(" "),e("h2",{attrs:{id:"中间件"}},[t._v("中间件")]),t._v(" "),e("p",[t._v("高版本需要继承MiddlewareMixin，低版本不需要。")]),t._v(" "),e("p",[t._v("各种架构中都会用到的技术（有些框架也称为管道，httphandle）。用户发起的请求会依次经过所有的中间件。由于中间件也用来处理django的内部的东西，所以自己添加的中间件一般写在系统中间件后面，除非你对流程很了解，想在框架某个流程时插入某些东西。")]),t._v(" "),e("h2",{attrs:{id:"模型"}},[t._v("模型")]),t._v(" "),t._m(11),t._v(" "),e("h3",{attrs:{id:"字段参数"}},[t._v("字段参数")]),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),e("p",[t._v("verbose_name（字段的自述名）")]),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),e("h3",{attrs:{id:"模型的属性"}},[t._v("模型的属性")]),t._v(" "),t._m(17),t._v(" "),e("p",[t._v("Manager 称为管理器 ，它是一个类，该类下面有多个方法，比如get，all，filter 方法，它们都属于这个管理器，你也可以重写一个新的管理器，实现新的查询方法。通常的 Objects.get()，就是指向该类下的方法。")]),t._v(" "),e("h3",{attrs:{id:"类的扩展"}},[t._v("类的扩展")]),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),e("p",[t._v("一个例子：")]),t._v(" "),e("HightCode",[[t._v("\nfrom django.db import models\n"),e("p",[t._v("class CommonInfo(models.Model):\nname = models.CharField(max_length=100)\nage = models.PositiveIntegerField()")]),t._v(" "),e("pre",[e("code",[t._v("class Meta:\n    abstract = True\n")])]),t._v(" "),e("p",[t._v("class Student(CommonInfo):\nhome_group = models.CharField(max_length=5)")])]],2),t._v(" "),e("p",[t._v("Student 模型将有三个项：name，age 和 home_group。CommonInfo 模型无法像一般的Django模型一样使用，因为它是一个抽象基类。它无法生成一张数据表或者拥有一个管理器，并且不能实例化或者直接储存。")]),t._v(" "),e("p",[t._v("许多应用场景下, 这种类型的模型继承恰好是你想要的。它提供一种在 Python 语言层级上提取公共信息的方式，同时在数据库层级上，每个子类各自仍然只创建一个数据库表。")]),t._v(" "),t._m(20),t._v(" "),e("p",[t._v("这是 Django 支持的第二种继承方式。使用这种继承方式时，每一个层级下的每个 model 都是一个真正意义上完整的 model 。每个 model 都有专属的数据表，都可以查询和创建数据表。继承关系在子 model 和它的每个父类之间都添加一个链接 (通过一个自动创建的 OneToOneField来实现)。")]),t._v(" "),e("p",[t._v("例如：")]),t._v(" "),e("HightCode",[[t._v("\nfrom django.db import models\n"),e("p",[t._v("class Place(models.Model):\nname = models.CharField(max_length=50)\naddress = models.CharField(max_length=80)")]),t._v(" "),e("p",[t._v("class Restaurant(Place):\nserves_hot_dogs = models.BooleanField(default=False)\nserves_pizza = models.BooleanField(default=False)")])]],2),t._v(" "),e("p",[t._v("Place里面的所有字段在 Restaurant中也是有效的，只不过数据保存在另外一张数据表当中。所以下面两个语句都是可以运行的：")]),t._v(" "),t._m(21),t._m(22),t._v(" "),e("p",[t._v("使用多表继承时，model 的每个子类都会创建一张新数据表，通常情况下，这正是我们想要的操作。这是因为子类需要一个空间来存储不包含在基类中的字段数据。但有时，你可能只想更改 model 在 Python 层的行为实现。比如：更改默认的 manager ，或是添加一个新方法。")]),t._v(" "),e("HightCode",[[t._v("\nfrom django.db import models\n"),e("p",[t._v("class Person(models.Model):\nfirst_name = models.CharField(max_length=30)\nlast_name = models.CharField(max_length=30)")]),t._v(" "),e("p",[t._v("class MyPerson(Person):\nclass Meta:\nproxy = True")]),t._v(" "),e("pre",[e("code",[t._v("def do_something(self):\n    # ...\n    pass\n")])])]],2),t._v(" "),e("p",[t._v("它们都操作同一个数据表，设置 proxy = Ture 实现代理，为Person 模型添加了一个方法\n你可以在代理中重写方法，或者改变某一字段的排序，不会对原始模型产生影响。比如你用原模型\n查询a字段是无序的，你在代理中对a字段元属性进行了排序，用代理模型去查询就是有序的。")]),t._v(" "),e("h2",{attrs:{id:"模型对应关系"}},[t._v("模型对应关系")]),t._v(" "),e("p",[t._v("框架实现了大部分字段了，文件，图片都有，关于文件如果用到可以仔细看看，另外有模型API，方便获取对象的信息，这对于开发很有用。")]),t._v(" "),e("h3",{attrs:{id:"一对一和一对多"}},[t._v("一对一和一对多")]),t._v(" "),e("p",[t._v("一对多比较了解了，被to的模型，通常会被多个表to。如果字段是外键，并且这个外键只被这个字段to那么这个时候就可以用一对一了，就是这个被to的模型，一张表只被另一张表to（不知道再被另一张表to的时候会发生什么）。通常用来做详情或扩展，比如用户的扩展，那么扩展内容可以是一个新的模型，因为这些内容是和用户相关的，所以应该一条详情对应一个用户，就可以用一对一。")]),t._v(" "),e("p",[t._v("使用一对一模型，在查询的时候，这个被关联的字段可以互相取到双方的值。")]),t._v(" "),t._m(23),t._v(" "),e("HightCode",[[t._v("\n    u = user.objects.filter().first()\n    u.detail.msg\n    # 反向查询\n    d = detail.objects.filter().first()\n    d.user.name\n    # 一对多，上面的详情变成了class\n    u = user.objects.filter().first()\n    u.class.msg\n    # 反向查询\n    c = class.objects.filter().first()\n    c.user_set.all()  # 返回查询集\n")]],2),t._v(" "),t._m(24),t._v(" "),e("h3",{attrs:{id:"多对多"}},[t._v("多对多")]),t._v(" "),t._m(25),t._v(" "),e("h3",{attrs:{id:"什么时候用多对多"}},[t._v("什么时候用多对多")]),t._v(" "),e("p",[t._v("对于一对多来说，被to的可以说是独立的，它可以不依赖其它模型，比如学生和班级，班级就是班级，而学生要和班级建立关系就用一对多，班级被to了，才会通过反向查询得到所有的学生。")]),t._v(" "),e("p",[t._v("对于上诉情况也会有特殊情况，上诉情况比较实用于中学，中学就是一个学生属于一个班级，如果在大学，我们进行选课，那么课程会是一个模型，一个学生会选择多个课程，这个时候用多对多就比较合适了，当然也可以通过第三张表将课程和学生建立关系，用一对多来实现。")]),t._v(" "),e("p",[t._v("被用做多对多的字段，创建对象的时候，如何赋值，add, set, remove, clear。")]),t._v(" "),e("h2",{attrs:{id:"查询与数据库"}},[t._v("查询与数据库")]),t._v(" "),e("p",[t._v("框架ORM查询补充")]),t._v(" "),e("h3",{attrs:{id:"数据迁移与修改模型"}},[t._v("数据迁移与修改模型")]),t._v(" "),e("p",[t._v("迁移功能非常强大，可以让你在开发过程中不断修改你的模型而不用删除数据库或者表然后再重新生成一个新的 —— 它专注于升级你的数据库且不丢失数据。实现模型变更的三个步骤：")]),t._v(" "),t._m(26),t._v(" "),e("p",[t._v("将生成和应用迁移文件的命令分成几个命令来执行，是因为你可能需要将迁移文件提交到你的版本控制系统中并跟随你的应用一起变化；这样做不仅可以使开发变得更加简单，而且对其他开发者以及上线生产非常有用。")]),t._v(" "),e("h3",{attrs:{id:"跨关联关系的查询"}},[t._v("跨关联关系的查询")]),t._v(" "),e("p",[t._v("可以像这样，只需使用关联的模型字段的名称，并使用双下划线分隔，直至你想要的字段")]),t._v(" "),t._m(27),t._v(" "),e("p",[t._v("发现当关联的字段有null的时候，查询不到结果。比如模型DMR有三张表，三张都有drawuser，到了drawuser外键对应的模型User的时候，有两张User的表，其中一张district字段为null，此时查询失效，需保证有关联的都不能为null。")]),t._v(" "),e("p",[t._v("它还可以反向工作。若要引用一个“反向”的关系，只需要使用该模型的小写的名称。")]),t._v(" "),e("p",[t._v("比如 Order 和  OrderItem ，它们的对应关系为：")]),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),e("p",[t._v("反向查询，关系是从右看到左：")]),t._v(" "),t._m(30),t._v(" "),e("p",[t._v("上面这个order_ids可以得到order，向上得到orderitem...")]),t._v(" "),e("p",[t._v("order__bigorder__date")]),t._v(" "),e("h3",{attrs:{id:"sql-优化"}},[t._v("SQL 优化")]),t._v(" "),e("p",[t._v("prefetch_related  select_related")]),t._v(" "),e("p",[t._v("都是针对表有关联的，如果不用，则拿到的只是外键的id，如果使用，则一次就把外键对象拿到。")]),t._v(" "),e("h3",{attrs:{id:"打印-sql-语句"}},[t._v("打印 SQL 语句")]),t._v(" "),t._m(31),t._v(" "),e("p",[t._v("代码如下：")]),t._v(" "),e("HightCode",[[t._v('\nfrom django.db import connection\n# 这里是查询\nMyModel.objects.filter(name="my name")\nprint connection.queries\n# 或者\nfrom django.db import connection\nprint MyModel.objects.filter(name="my name").query\n')]],2),t._v(" "),e("h3",{attrs:{id:"save-方法"}},[t._v("save 方法")]),t._v(" "),t._m(32),t._v(" "),e("h3",{attrs:{id:"查询对象-f，q"}},[t._v("查询对象 F，Q")]),t._v(" "),e("p",[t._v("F用来做运算，加减乘除。Q做复杂查询。")]),t._v(" "),e("h3",{attrs:{id:"查询集"}},[t._v("查询集")]),t._v(" "),e("p",[t._v("查询集，就是查询结果的集合。")]),t._v(" "),e("p",[t._v("Blog.objects.all() 返回包含数据库中所有 Blog 对象的一个查询集。")]),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),e("p",[t._v("queryset是查询集，就是传到服务器上的url里面的查询内容。Django会对查询返回的结果集QuerySet进行缓存，这是为了提高查询效率。也就是说，在你创建一个QuerySet对象的时候，Django并不会立即向数据库发出查询命令，只有在你需要用到这个QuerySet的时候才会这样做。")]),t._v(" "),e("p",[t._v("缓存和查询集：")]),t._v(" "),e("p",[t._v("每个查询集都包含一个缓存来最小化对数据库的访问。理解它是如何工作的将让你编写最高效的代码。\n在一个新创建的查询集中，缓存为空。首次对查询集进行求值 —— 同时发生数据库查询 ——Django 将保存查询的结果到查询集的缓存中并返回明确请求的结果（例如，如果正在迭代查询集，则返回下一个结果）。接下来对该查询集 的求值将重用缓存的结果。\n请牢记这个缓存行为，因为对查询集使用不当的话，它会坑你的。例如，下面的语句创建两个查询集，对它们求值，然后扔掉它们：")]),t._v(" "),t._m(35),e("p",[t._v("这意味着相同的数据库查询将执行两次，显然倍增了你的数据库负载。同时，还有可能两个结果列表并不包含相同的数据库记录，因为在两次请求期间有可能有Entry被添加进来或删除掉。为了避免这个问题，只需保存查询集并重新使用它：")]),t._v(" "),t._m(36),e("h3",{attrs:{id:"查询集方法"}},[t._v("查询集方法")]),t._v(" "),t._m(37),t._v(" "),e("p",[t._v("关联查询例子：")]),t._v(" "),e("p",[t._v("Person(人)，字段中有一个居住地living，living外键到City，City 中有 province(省)，如何直接得到省的数据？")]),t._v(" "),t._m(38),t._m(39),t._v(" "),e("p",[t._v("常用方法：")]),t._v(" "),t._m(40),t._v(" "),e("p",[t._v("例子：\n类是 Author 字段 username，password")]),t._v(" "),t._m(41),e("p",[t._v("匹配的对象：在使用update的时候，需要注意，查询集才有这个方法，查询集实例没有，查询集有5个，update可以一次更新5张表的数据。")]),t._v(" "),e("h3",{attrs:{id:"分页实现"}},[t._v("分页实现")]),t._v(" "),e("p",[t._v("两个参数 page，limit 每次都传这两个参数，决定了数据的截取位置和截取多少。")]),t._v(" "),t._m(42),t._v(" "),e("h3",{attrs:{id:"其它"}},[t._v("其它")]),t._v(" "),t._m(43),t._v(" "),t._m(44),t._v(" "),e("p",[t._v("这两个函数可以得到特定字段的值，有些字段是外键，我们在表示的时候，需要的是外键所对应的对象，利用这个外键id,查到数据后，将查到的对象添加到刚才的列表中去。")]),t._v(" "),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),e("h2",{attrs:{id:"事务"}},[t._v("事务")]),t._v(" "),t._m(48),t._v(" "),e("h2",{attrs:{id:"命令"}},[t._v("命令")]),t._v(" "),t._m(49),t._v(" "),t._m(50),t._v(" "),t._m(51),t._v(" "),t._m(52),t._v(" "),e("p",[t._v("各种修改表后，可能会导致表无法创建（历史原因，可能），执行命令来同步表（遇到场景，提示字段名字重复，创建了字段后，又修改，删除migrations，创建），可以执行以下命令：")]),t._v(" "),t._m(53),e("h3",{attrs:{id:"创建管理员"}},[t._v("创建管理员")]),t._v(" "),e("p",[t._v("首先，我们需要创建一个能够登录管理站点的用户。")]),t._v(" "),e("p",[t._v("运行如下命令：")]),t._v(" "),t._m(54),t._v(" "),t._m(55),e("h2",{attrs:{id:"配置"}},[t._v("配置")]),t._v(" "),e("p",[t._v("配置修改setting.py文件")]),t._v(" "),e("h3",{attrs:{id:"django设置time-zone"}},[t._v("Django设置TIME_ZONE")]),t._v(" "),t._m(56),t._v(" "),e("h2",{attrs:{id:"模版"}},[t._v("模版")]),t._v(" "),t._m(57),t._v(" "),t._m(58),t._v(" "),e("p",[t._v("注意在django工程的设置中，模板设置里面，APP_DIRS设置为True，这样就允许查找应用下的模板。这里的应用包括自己创建和系统的，可以查看设置文件看看该项目有哪些应用。只要在该项目下有过Template文件夹，django就可以找到模板。")]),t._v(" "),e("p",[t._v("模板语言：")]),t._v(" "),e("p",[t._v("变量 { {   } }，变量的值来自于context中的输出")]),t._v(" "),e("p",[t._v("句点查找，就是  .  查找，比如 { { f.b } }，将按照一定顺序的查找规则。\n字典，属性，方法调用，列表类型索引。")]),t._v(" "),e("p",[t._v("系统使用所找到的第一个有效类型，这是一种短路逻辑它可以嵌套，比如 { {   f.a.bv( )   } } ，按顺序来，如果a没有找到，就去找bv()。")]),t._v(" "),e("h3",{attrs:{id:"django-模板中的html自动转义"}},[t._v("Django 模板中的HTML自动转义")]),t._v(" "),e("p",[t._v("当用户输入的信息是一个JS脚本的时候，这个时候浏览器会执行脚本，难免会有漏洞。所以不能进行转义。")]),t._v(" "),e("p",[t._v("可以使用模板过滤器：safe")]),t._v(" "),e("p",[t._v("例子：")]),t._v(" "),t._m(59),e("h3",{attrs:{id:"自定义标签"}},[t._v("自定义标签")]),t._v(" "),t._m(60),t._v(" "),t._m(61),t._v(" "),e("p",[t._v("{% load %} 标签检查 INSTALLED_APPS 中的设置，仅允许加载已安装的Django应用程序中的\n模板库。这是一个安全特性。它可以让你在一台电脑上部署很多的模板库的代码，而又不用把它们\n暴露给每一个Django安装。")]),t._v(" "),e("h3",{attrs:{id:"url-标签"}},[t._v("url 标签")]),t._v(" "),t._m(62),t._m(63),e("p",[t._v("通常我们的URL都是硬编码的，在模板里面可能会有多个标签都是一个url，如果你要改变这个url，那么模板里面所有的url都要改变，这时候我们可以使用url标签。")]),t._v(" "),t._m(64),t._m(65),t._m(66),t._v(" "),t._m(67),t._v(" "),e("p",[t._v("带参数的url")]),t._v(" "),t._m(68),t._m(69),e("p",[t._v("或者这样:")]),t._v(" "),t._m(70),e("h3",{attrs:{id:"模板继承"}},[t._v("模板继承")]),t._v(" "),e("p",[t._v("创建一个基本的骨架模板，将里面的部分内容用其它模板来替换。")]),t._v(" "),t._m(71),e("p",[t._v("在这个模板中，使用block标签， block 告诉模版引擎：子模版可能会覆盖掉模版中的这些位置。")]),t._v(" "),e("p",[t._v("只是可能替换，不一定非要替换，如果没被替换，输出是原样：")]),t._v(" "),t._m(72),e("p",[t._v("在子模板中，同样是block标签。比如")]),t._v(" "),t._m(73),t._m(74),t._v(" "),t._m(75),e("p",[t._v("如果需要获得父模板中代码块的内容，可以使用")]),t._v(" "),t._m(76),t._v(" "),e("p",[t._v("如果只想在上级代码块基础上添加内容，而\n不是全部重载，该变量就显得非常有用了。")]),t._v(" "),e("p",[t._v("过滤器可以自己定义，记得在设置中添加路径\n自定义的过滤器添加了才有用，继承中没有添加过的过滤器不能使用")]),t._v(" "),e("h3",{attrs:{id:"标签"}},[t._v("标签")]),t._v(" "),e("p",[t._v("Django自带了大约24个内置的模版标签。你可以在内置标签参考手册中阅读全部关于它们的内容。")]),t._v(" "),e("p",[t._v("标签在渲染的过程中提供任意的逻辑。")]),t._v(" "),t._m(77),t._v(" "),e("h3",{attrs:{id:"过滤器"}},[t._v("过滤器")]),t._v(" "),e("p",[t._v("更改变量或标签参数的值")]),t._v(" "),t._m(78),t._v(" "),t._m(79),t._v(" "),t._m(80),t._v(" "),e("p",[t._v("Django提供了大约六十个内置的模版过滤器。你可以在 内置过滤器参考手册中阅读全部关于它们的信息。")]),t._v(" "),e("h3",{attrs:{id:"注释"}},[t._v("注释")]),t._v(" "),t._m(81),t._v(" "),e("p",[t._v("要注意的是，注释不会跨多行比如：")]),t._v(" "),t._m(82),e("p",[t._v("这个注释是无效的。")]),t._v(" "),e("h3",{attrs:{id:"其它-2"}},[t._v("其它")]),t._v(" "),e("p",[t._v("ifequal：输出第一个判断为True的值")]),t._v(" "),e("h2",{attrs:{id:"其它功能"}},[t._v("其它功能")]),t._v(" "),t._m(83)],1)},[function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"/my-notebook/images/Python/djangobooklogo_large.png",alt:"image"}})])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("大多数的应用都是用 "),e("code",[t._v("Cookie")]),t._v(" 来实现 "),e("code",[t._v("Session")]),t._v(" 跟踪的，第一次创建 "),e("code",[t._v("Session")]),t._v(" 的时候，服务端会在HTTP协议中告诉客户端，需要在 Cookie里面记录一个 "),e("code",[t._v("Session ID")]),t._v("，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。如果客户端的浏览器禁用了Cookie怎么办？一般这种情况下，会使用一种叫做 "),e("code",[t._v("URL重写")]),t._v(" 的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 "),e("code",[t._v("sid=xxxxx")]),t._v(" 这样的参数，服务端据此来识别用户。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",[s("code",[this._v("关于缓存：为了实现性能，缓存还是有必要的，不过先做到数据库的实现。session还可以基于文件来实现\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ol",[s("li",[this._v("当用户来访问服务端时,服务端生成一个随机字符串；")]),this._v(" "),s("li",[this._v("当用户登录成功后 把 {sessionID :随机字符串} 组织成键值对 加到 cookie里发送给用户；")]),this._v(" "),s("li",[this._v("服务器以发送给客户端 cookie中的随机字符串做键，用户信息做值，保存用户信息；")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在代码上，我们直接 "),s("code",[this._v("request.session['name'] = \"my name\"")]),this._v(" 这一步执行了，就是使用随机字符串，创建了session保存到数据库，然后把 "),s("code",[this._v("session_id")]),this._v("（随机字符串）放在cookie里面给到浏览器，浏览器就设置了cookie，下次浏览器就会在请求里面cookie带上这个id，框架流程上中间件会拿出请求体的cookie查询数据库，并将session对象赋值给 "),s("code",[this._v("request.session")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("使用普通的Python字符串作为字典键 "),s("code",[this._v("request.session")]),this._v("。这是一个比硬性规定更重要的惯例。\n以下划线开头的会话字典键由Django保留供内部使用。不要request.session用新对象覆盖，也不要访问或设置其属性。像Python字典一样使用它。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("扩展依赖于 "),s("code",[this._v("SessionStore")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",[s("code",[this._v("from django.contrib.sessions.backends.db import SessionStore\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果 "),s("code",[this._v("SESSION_ENGINE")]),this._v(" 不是数据库，需要从对应的引擎来引入，可以这样：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果您在cookie中设置了 "),s("code",[this._v("HttpOnly")]),this._v(" 性，那么通过js脚本将无法读取到cookie信息，这样能有效的防止 "),s("code",[this._v("XSS")]),this._v(" 攻击，具体一点的介绍请google进行搜索")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",[s("code",[this._v("The request's session was deleted before the request completed. The user may have logged out in a concurrent request, for example.\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("每个模型都是django.db.models.Model 的一个Python 子类。模型的每个属性都表示为数据库中的一个字段。")]),this._v(" "),s("li",[this._v("每个字段都被指定成一个类属性，例如Field类。每个属性映射到一个数据库的列。")]),this._v(" "),s("li",[this._v("查阅或看源代码，可以从模型类上获取到很多内容。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("question_text = models.CharField(max_length=200,blank=true,null=true)")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[e("code",[t._v("blank，null")]),t._v(" 都是该字段可以为空，blank是在admin中可以为空，要在表中可以为空，设置null")]),t._v(" "),e("li",[e("code",[t._v("null = Ture")]),t._v(" 指定空，blank = Ture 允许填")]),t._v(" "),e("li",[e("code",[t._v("choices")]),t._v(" 这个字段参数设置该字段内容是选择列表")]),t._v(" "),e("li",[e("code",[t._v("primary_key")]),t._v(" 该参数为Ture  指定其为主键字段，不写，自动添加一个IntegerField字段为主键")]),t._v(" "),e("li",[e("code",[t._v("db_index")]),t._v(" 为此字段创建索引")]),t._v(" "),e("li",[e("code",[t._v("editable")]),t._v(" 设置为False  这个字段将不会出现在 admin 或者其他 ModelForm.，会跳过模型验证")]),t._v(" "),e("li",[e("code",[t._v("unique")]),t._v(" 为Ture，这个字段在表中必须有唯一值，注意当设置 unique 为True 时，你不需要再指定 db_index，因unique 本身就意味着一个索引的创建")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("Field.verbose_name")]),this._v(" 一个字段的可读性更高的名称。如果用户没有设定冗余名称字段，Django会自动将该字段属性名中的下划线转换为空格，并用它来创建冗余名称。可以参照 "),s("code",[this._v("Verbose field names")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("元参数")]),this._v(" permissions 是用来这种模型的权限的，default_permissions 是设置默认权限的，比如add，change，即模型是否能添加，改变。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[this._v("TIP")]),this._v(" "),s("p",[this._v("由于Django 查询语法的工作方式，字段名称中连续的下划线不能超过一个。\ndjango不允许重写字段。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("objects")]),this._v(" 模型最重要的属性是Manager。它是Django 模型进行数据库查询操作的接口，并用于从数据库获取实例。如果没有自定义Manager，则默认的名称为objects。Managers 只能通过模型类访问，而不能通过模型实例访问。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("创建一个可公共使用的模型，他的字段将被其他模型包含，这个模型称为："),s("code",[this._v("抽象基类")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当你想将一些共有信息放进其它一些model的时候，抽象化类是十分有用的。你编写完基类之后，在 "),s("code",[this._v("Meta")]),this._v(" 类中设   "),s("code",[this._v("abstract=True")]),this._v("，这个模型就不会被用来创建任何数据表。取而代之的是，当它被用来作为一个其他model的基类时，它的字段将被加入那些子类中。如果抽象基类和它的子类有相同的字段名，那么将会出现 "),s("code",[this._v("error（并且Django将抛出一个exception）")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("多表继承")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('>>> Place.objects.filter(name="Bob\'s Cafe")\n>>> Restaurant.objects.filter(name="Bob\'s Cafe")\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("代理继承")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如 "),s("code",[this._v("user")]),this._v(" 有 "),s("code",[this._v("detail")]),this._v(" 对到模型 "),s("code",[this._v("detail")]),this._v("：")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("反向查询如果设置了 "),e("code",[t._v("related_name")]),t._v("，比如 "),e("code",[t._v("class_user")]),t._v("，可以这样 "),e("code",[t._v("c.class_user")]),t._v("，默认用 "),e("code",[t._v("表名_set")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("一般通过外键，新建一个表，把两张表联系起来，实现多对多。或者在其中一个模型里面建立多对多字段。\n此时进行正向查询，不会像一对多那样得到外键id或对象，应该 "),s("code",[this._v(".all()")]),this._v(" 得到查询集（一对多方向才得到查询集），反向查询也是得到查询集，反向查询也是可以用 "),s("code",[this._v("related_name")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ol",[s("li",[this._v("修改你的模型（在models.py文件中）")]),this._v(" "),s("li",[this._v("运行python manage.py makemigrations ，为这些修改创建迁移文件")]),this._v(" "),s("li",[this._v("运行python manage.py migrate ，将这些改变更新到数据库中")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",[s("code",[this._v("dquery = DrawMoneyRecord.objects.filter(drawuser__district__name__icontains='西山片区')\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",[s("code",[this._v("order = models.ForeignKey(to=Order, verbose_name=_('订单'), editable=False)\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("想要从Order来查："),s("code",[this._v("Order.objects.filter(orderitem__name__icontains='小')")]),this._v("，便可以利用orderitem来查出order")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",[s("code",[this._v("AgencyOrder.objects.filter(agencyorderitem__orderitem__order_id__in=order_ids)\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ol",[s("li",[this._v("确保 "),s("code",[this._v("django.core.context_processors.debug")]),this._v(" 在 "),s("code",[this._v("CONTEXT_PROCESSORS")]),this._v(" 中")]),this._v(" "),s("li",[this._v("DEBUG = True")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("一般在得到查询集后，只有是去创建的情况才使用 "),s("code",[this._v("queryset.save()")]),this._v("，对于数据的修改，使用 "),s("code",[this._v("quseryset.save(update_fields=['fields'])")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("filter(**kwargs) 返回一个新的查询集，它包含满足查询参数的对象。")]),this._v(" "),s("li",[this._v("exclude(**kwargs) 返回一个新的查询集，它包含不满足查询参数的对象。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("通过 get 获取一个单一的对象 "),s("code",[this._v("one_entry = Entry.objects.get(pk=1)")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v(">>> print([e.headline for e in Entry.objects.all()])\n>>> print([e.pub_date for e in Entry.objects.all()])\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v(">>> queryset = Entry.objects.all()\n>>> print([p.headline for p in queryset]) # Evaluate the query set.\n>>> print([p.pub_date for p in queryset]) # Re-use the cache from the evaluation.\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("order_by 排序")]),this._v(" "),s("li",[this._v("pk__in  当需要取多个结果的时候，比如id=1,2,3这三条数据，"),s("code",[this._v("models.object.filter(pk__in = ids)")]),this._v("，ids=[1,2,3]")]),this._v(" "),s("li",[this._v("select_related()函数 在一对一和外键中使用，目的：减少查询次数")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-py extra-class"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[t._v("p"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("Person"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token builtin"}},[t._v("object")]),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("select_related"),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token string"}},[t._v("'living'")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),e("span",{attrs:{class:"token string"}},[t._v('"小明"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\np"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("living"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("province\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果省是其它的外键，比如 province外键到 Province类，查询集要用 "),s("code",[this._v("' __ '")]),this._v("，"),s("code",[this._v("p=Person.object.select_related('living__province').get(name=\"小明\")")]),this._v("。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("table",[e("thead",[e("tr",[e("th",[t._v("Command")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("__exact")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("精确等于 like 'aaa'")])]),t._v(" "),e("tr",[e("td",[t._v("__iexact")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("精确等于 忽略大小写 ilike 'aaa'")])]),t._v(" "),e("tr",[e("td",[t._v("__contains")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("包含 like '%aaa%'")])]),t._v(" "),e("tr",[e("td",[t._v("__icontains")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("包含 忽略大小写 ilike '%aaa%'，但是对于sqlite来说，contains的作用效果等同于icontains。")])]),t._v(" "),e("tr",[e("td",[t._v("__gt")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("大于")])]),t._v(" "),e("tr",[e("td",[t._v("__gte")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("大于等于")])]),t._v(" "),e("tr",[e("td",[t._v("__lt")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("小于")])]),t._v(" "),e("tr",[e("td",[t._v("__lte")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("小于等于")])]),t._v(" "),e("tr",[e("td",[t._v("__in")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("存在于一个list范围内")])]),t._v(" "),e("tr",[e("td",[t._v("__startswith")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("以...开头")])]),t._v(" "),e("tr",[e("td",[t._v("__istartswith")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("以...开头 忽略大小写")])]),t._v(" "),e("tr",[e("td",[t._v("__endswith")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("以...结尾")])]),t._v(" "),e("tr",[e("td",[t._v("__iendswith")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("以...结尾，忽略大小写")])]),t._v(" "),e("tr",[e("td",[t._v("__range")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("在...范围内")])]),t._v(" "),e("tr",[e("td",[t._v("__year")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("日期字段的年份")])]),t._v(" "),e("tr",[e("td",[t._v("__month")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("日期字段的月份")])]),t._v(" "),e("tr",[e("td",[t._v("__day")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("日期字段的日")])]),t._v(" "),e("tr",[e("td",[t._v("__isnull=True/False")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),e("tr",[e("td",[t._v("__isnull=True")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("与 __exact=None的区别")])])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-py extra-class"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[t._v("Author"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("objects"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token builtin"}},[t._v("filter")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("username__exact"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("username"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),e("span",{attrs:{class:"token comment"}},[t._v("#精准查询")]),t._v("\nk"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("Author"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("objects"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token builtin"}},[t._v("filter")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("username__exact"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("username"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nobj"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("Author"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("objects"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("username__exact"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("username"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),e("span",{attrs:{class:"token comment"}},[t._v("#get 取得的是字段为username")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("query[ (page-1)*limit : page*limit ]")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("对于模型的新创建的实例，直接save()就行了，不能用 "),s("code",[this._v("save(update_fields=[])")]),this._v("，本来就没有字段，所以不能用。如果是QS的元素，考虑使用 "),s("code",[this._v("save(update_fields=[])")]),this._v("，它只更新特定的字段。")]),this._v(" "),s("li",[this._v("对于QS，可以使用QS.update(field=value)，批量跟新。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("django queryset")]),this._v(" 的 "),s("code",[this._v("values")]),this._v(" 和 "),s("code",[this._v("values_list(values_list('id', flat=true))")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("去除重复：distinct")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("distinct()可以对查询集进行去重复，比如querset.distinct(),  得到的查询集元素都是唯一的对象。（有些时候，我们用id__in去得到的数据会有好几个，比如一个模型的两张表字段外键都是对到同一个，这个时候id__in 就会得到两个查询集对象，但是这个去重一般是在想处理相同字段的时候使用）当我们想去除字段相同的数据的时候，"),s("code",[this._v("querset.values(fields).distinct().order_by('fields')")]),this._v(", 这个操作会返回dict, 这里需要排序的原因是如果不排序。在执行distinct的时候，使用默认排序id, 两列数据id是不一样的，只有我们想去重的字段是一样的，所以要以想去重的字段为准，执行一次排序。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[this._v("在做查询的时候，filter的参数如果是None，就是把模型中该字段为null的查出来")])]),this._v(" "),s("li",[s("p",[this._v("sql：EXISTS用于检查子查询是否至少会返回一行数据，该子查询实际上并不返回任何数据，而是返回值True或False。EXISTS 指定一个子查询，检测 "),s("code",[this._v("行")]),this._v(" 的存在。django也可以用这个方法，对于queryset.exists()即可")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在Django中使用事务："),s("code",[this._v("@transaction.atomic")]),this._v(" 该装饰器将装饰内容由事务来处理。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("项目目录下的 "),s("code",[this._v("manage.py")]),this._v(" 接受输入参数，执行对应命令。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("python manage.py validate 验证模型的有效性")]),this._v(" "),s("li",[this._v("python manage.py migrate  创建数据库表")]),this._v(" "),s("li",[this._v("python manage.py makemigrations polls  关联应用，激活模型（现在Django知道要包含polls应用。 可以运行这个命令）")]),this._v(" "),s("li",[this._v("sqlmigrate    展示迁移的SQL语句")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果在后面的开发中需要更改模型，先在代码中加入新的字段，然后执行 "),s("code",[this._v("迁移命令")]),this._v("，再执行数据库创建命令。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("python manage.py makemigrations （根据模型给应用生成迁移脚本）")]),this._v(" "),s("li",[this._v("python manage.py migrate")]),this._v(" "),s("li",[this._v("python mange.py shell 进入交互式shell")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("python manage.py migrate myapp --fake\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ol",[e("li",[e("p",[e("code",[t._v("$ python manage.py createsuperuser")]),t._v(" 键入你想要使用的用户名，然后按下回车键")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("Username: admin")]),t._v(" 然后提示你输入想要使用的邮件地址")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("Email address: admin@example.com")]),t._v(" 你将被要求输入你的密码两次，第二次输入是确认密码")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("Password: **********\nPassword (again): *********\nSuperuser created successfully.\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Django默认的timezone是 "),s("code",[this._v("TIME_ZONE = 'America/Chicago'")]),this._v("，现在要改成我们中国的时区 只需编辑settings.py文件，把time_zone的值改成TIME_ZONE=即可。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("模版语法可以快速开发页面，"),s("strong",[this._v("不过对于前后端分离的项目，基本没什么用了")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("使用模板，实现动态的生成HTML。模板包含所需HTML输出的静态部分，以及一些特殊的语法，描述如何将动态内容插入。")]),this._v(" "),s("li",[this._v("Django 为加载和渲染模板定义了一套标准的API，与具体的后台无关。")]),this._v(" "),s("li",[this._v("加载包括根据给定的标识找到模板然后预处理，通常会将它编译好放在内存中。")]),this._v(" "),s("li",[this._v("渲染表示使用Context 数据对模板插值并返回生成的字符串。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("hello {{name|safe}}\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们可以创建一个模板库，里面包含我们自己写的标签和过滤器。在应用目录下创建一个templates文件夹，该文件创建一个文件\n"),s("strong",[this._v("init")]),this._v(".py，说明它是一个模块，如何就可以写自定义的 "),s("code",[this._v(".py")]),this._v(" 标签过滤器。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在模板中 "),s("code",[this._v("{% load poll_extras %}")]),this._v(" 便可以将标签载入，load后面的是写的.py。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-py extra-class"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[t._v("urlpatterns "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" patterns"),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token string"}},[t._v("''")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("    \n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),e("span",{attrs:{class:"token string"}},[t._v("'^article$'")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{attrs:{class:"token string"}},[t._v("'news_index'")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),e("span",{attrs:{class:"token attr-name"}},[t._v("href")]),e("span",{attrs:{class:"token attr-value"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("/article"),e("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("资讯"),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" \n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-py extra-class"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[t._v("urlpatterns "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" patterns"),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token string"}},[t._v("''")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("    \n    url"),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),e("span",{attrs:{class:"token string"}},[t._v("'^article$'")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{attrs:{class:"token string"}},[t._v("'news_index'")]),t._v(" ，name"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),e("span",{attrs:{class:"token string"}},[t._v('"news_index"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),e("span",{attrs:{class:"token attr-name"}},[t._v("href")]),e("span",{attrs:{class:"token attr-value"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("{%url "),e("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v("news_index"),e("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v("%}"),e("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("资讯"),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("增加一个nema，当你改变原来的url时，模板的地址也会随之改变，在view中使用 "),s("code",[this._v('HttpResponseRedirect("/article")')]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("使用 "),s("code",[this._v("reverse()")]),this._v(" 函数 "),s("code",[this._v('HttpResponseRedirect(reverse("news_index"))')]),this._v("。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-py extra-class"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[t._v("url"),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),e("span",{attrs:{class:"token string"}},[t._v("'^(?P<year>\\d{4})/(?P<month>\\d{1,2})/$'")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{attrs:{class:"token string"}},[t._v("'news_list'")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("name"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),e("span",{attrs:{class:"token string"}},[t._v('"news_archive"')]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),e("span",{attrs:{class:"token attr-name"}},[t._v("href")]),e("span",{attrs:{class:"token attr-value"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("{%url "),e("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v("news_archive"),e("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v(" 2010  02%}"),e("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("2010年02月"),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" \n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),e("span",{attrs:{class:"token attr-name"}},[t._v("href")]),e("span",{attrs:{class:"token attr-value"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("{%url "),e("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v("news_archive"),e("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v(" year=2010  month=02%}"),e("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("2010年02月"),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" \n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[t._v("{% block title %}\n    "),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ul")]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),e("span",{attrs:{class:"token attr-name"}},[t._v("href")]),e("span",{attrs:{class:"token attr-value"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("/"),e("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Home"),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),e("span",{attrs:{class:"token attr-name"}},[t._v("href")]),e("span",{attrs:{class:"token attr-value"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("/blog/"),e("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Blog"),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ul")]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n{% endblock %}\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ul")]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),e("span",{attrs:{class:"token attr-name"}},[t._v("href")]),e("span",{attrs:{class:"token attr-value"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("/"),e("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Home"),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),e("span",{attrs:{class:"token attr-name"}},[t._v("href")]),e("span",{attrs:{class:"token attr-value"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("/blog/"),e("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Blog"),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ul")]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[this._v("{% block title %}My amazing blog{% endblock %}\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("则原模板在使用的时候，它的title包围的块被替换成 "),s("code",[this._v("My amazing blog")]),this._v("，子模板在开头加上extend标签，说明继承关系：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[this._v('{% extends "base.html" %}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{pre:!0},[s("pre",[s("code",[this._v("{{ block.super }} \n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这个定义是刻意模糊。例如，一个标签可以输出内容，作为控制结构，例如“if”语句或“for”循环从数据库中提取内容，甚至可以访问其他的模板标签。Tags是由 "),s("code",[this._v("{% %}")]),this._v(" 来定义的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("{ { django|title } }")]),this._v(" 把django变量的内容开头是小写的变成大写")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("过滤器能够被“串联”。一个过滤器的输出将被应用到下一个。"),s("code",[this._v("{ { text|escape|linebreaks } }")]),this._v(" 就是一个常用的过滤器链，它编码文本内容，然后把行打破转成 "),s("code",[this._v("<p>")]),this._v(" 标签。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("一些过滤器带有参数。过滤器的参数看起来像是这样："),s("code",[this._v("{ { bio|truncatewords:30 } }")]),this._v("。这将显示 bio 变量的前30个词。\n过滤器参数包含空格的话，必须被引号包起来；例如，使用逗号和空格去连接一个列表中的元素，你需要使用 "),s("code",[this._v('{ { list|join:", " } }')]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("{# This is a comment #}")]),this._v(" 这样完成类注释，注释的内容不会在模板渲染时输出。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("This is a {# this is not\n            a comment #}\ntest.\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[t._v("发送信号：在特点操作完成前后都可以发送信息，比如数据save()")]),t._v(" "),e("li",[t._v("聚合内容（RSS ATOM）")]),t._v(" "),e("li",[t._v("静态文件收集：方便部署")]),t._v(" "),e("li",[t._v("验证器：用在模型字段参数里面，对字段的值进行验证\nfroms:表单模型，表单相关，验证器可以在表单模型字段里面使用（表单模型不是我常用的东西）")]),t._v(" "),e("li",[t._v("日志记录模块")])])}],!1,null,null,null);n.options.__file="Django.md";s.default=n.exports}}]);