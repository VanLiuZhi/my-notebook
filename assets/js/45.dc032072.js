(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{496:function(e,t,s){"use strict";s.r(t);var n=s(1),a=Object(n.a)({},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"mongoengine"}},[e._v("MongoEngine")]),e._v(" "),s("p",[e._v("文档"),s("a",{attrs:{href:"http://docs.mongoengine.org/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://docs.mongoengine.org/index.html"),s("OutboundLink")],1),e._v("\nMongoEngine是Python操作MongoDB的ORM封装，可以看到很多ORM框架的影子，比如Django的ORM。底层调用了pymongo。")]),e._v(" "),s("p",[e._v("基本用法都是创建Document的class，得到class的instance，然后去操作instance。")]),e._v(" "),s("p",[e._v("MongoDB数据库是文档型的，在一个集合中，每一个文档都可以是不同的结构，不过使用了ORM，查询写入都会受到ORM的限制，当然你应该规范文档的结构。")]),e._v(" "),s("p",[e._v("ORM提供的功能比较有限，基础操作满足不了的，查pymongo，框架底层是基于pymongo。")]),e._v(" "),s("h1",{attrs:{id:"document-instances"}},[e._v("Document instances")]),e._v(" "),s("h2",{attrs:{id:"clean"}},[e._v("clean")]),e._v(" "),s("p",[e._v("实例方法，用来做save前操作。")]),e._v(" "),s("h2",{attrs:{id:"cascading-saves"}},[e._v("Cascading Saves")]),e._v(" "),s("p",[e._v("If your document contains ReferenceField or GenericReferenceField objects, then by default the save() method will not save any changes to those objects.\n如果文档包含ReferenceField或者GenericReferenceField字段，save方法不会保存他们的修改，需要在save(cascade=True)设置，save方法描述：")]),e._v(" "),e._m(0),e._v(" "),s("h2",{attrs:{id:"delete"}},[e._v("delete")]),e._v(" "),s("p",[e._v("执行delete，需要有id字段。")]),e._v(" "),s("h2",{attrs:{id:"document-ids"}},[e._v("Document IDs")]),e._v(" "),s("p",[e._v("文档要保存了才能访问id，通过情况不需要声明id字段")]),e._v(" "),e._m(1),s("p",[e._v("通过设置字段的关键字来创建id，这里把email作为id，事实上id是主键的别名，pk == id 是等价的\n? 修改了默认主键，是不是就不存在唯一表示了，既没有了ObjectId('123456789abcdef000000000')")]),e._v(" "),e._m(2),s("h1",{attrs:{id:"querying-the-database"}},[e._v("Querying the database")]),e._v(" "),s("p",[e._v("QuerySetManager QuerySet 的概念在MongoEngine中也是适用的。\n查询集使用本地缓存，如果想返回新的结果，使用no_cache方法。")]),e._v(" "),s("h2",{attrs:{id:"filtering-queries"}},[e._v("Filtering queries")]),e._v(" "),s("p",[e._v("user = User.objects(name='liu zhi')")]),e._v(" "),s("h2",{attrs:{id:"query-operators"}},[e._v("Query operators")]),e._v(" "),e._m(3),s("h3",{attrs:{id:"string-queries"}},[e._v("String queries")]),e._v(" "),s("p",[e._v("The following operators are available as shortcuts to querying with regular expressions:")]),e._v(" "),e._m(4),s("h3",{attrs:{id:"geo-queries-特定字段扩展的查询"}},[e._v("Geo queries(特定字段扩展的查询)")]),e._v(" "),s("p",[e._v("PointField, LineStringField and PolygonField字段增加了特殊的查询方法，详情看文档。")]),e._v(" "),s("h3",{attrs:{id:"querying-lists-查询list字段的扩展"}},[e._v("Querying lists(查询list字段的扩展)")]),e._v(" "),s("h3",{attrs:{id:"raw-queries-pymongo查询"}},[e._v("Raw queries(pymongo查询)")]),e._v(" "),e._m(5),e._v(" "),s("h3",{attrs:{id:"limiting-and-skipping-results"}},[e._v("Limiting and skipping results")]),e._v(" "),s("p",[e._v("使用切片实现原生db.document.find().limit().skip()，get，first方法，get是检索唯一结果，如果有多个结果匹配，会触发MultipleObjectsReturned异常。get_or_create()已经弃用，最好不要使用，由于没有事务的原因，它不是安全的。")]),e._v(" "),s("h3",{attrs:{id:"default-document-queries-扩展模型管理器"}},[e._v("Default Document queries(扩展模型管理器)")]),e._v(" "),s("p",[e._v("相当于对objects重写，使用特定的装饰器，方法名字可以自定义，这样可以做到使用原始的查询原始数据，使用自定义，查询自定义数据，比如自定义的只查询状态是正常的。")]),e._v(" "),e._m(6),s("h3",{attrs:{id:"custom-querysets-封装查询集方法"}},[e._v("Custom QuerySets(封装查询集方法)")]),e._v(" "),s("p",[e._v("把某些特定查询条件组合，通过新的方法获取查询集，可以给多个文档模型使用。")]),e._v(" "),e._m(7),s("h3",{attrs:{id:"aggregation"}},[e._v("Aggregation")]),e._v(" "),s("p",[e._v("MongoDB的聚合方法\nobjects 方法")]),e._v(" "),e._m(8)])},[function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v(':param cascade: Sets the flag for cascading saves.  You can set a default by setting "cascade" in the document '),t("strong",[this._v("meta")]),this._v("\n暂时没有做过测试。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-s extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v(">>> page = Page(title=\"Test Page\")\n>>> page.id\n>>> page.save()\n>>> page.id\nObjectId('123456789abcdef000000000')\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-s extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v(">>> class User(Document):\n...     email = StringField(primary_key=True)\n...     name = StringField()\n...\n>>> bob = User(email='bob@example.com', name='Bob')\n>>> bob.save()\n>>> bob.id == bob.email == 'bob@example.com'\nTrue\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("ne – not equal to 不等于\nlt – less than 小于\nlte – less than or equal to 小于等于\ngt – greater than 大于\ngte – greater than or equal to 大于等于\nnot – negate a standard check, may be used before other operators (e.g. Q(age__not__mod=5)) 否定其它条件，比如查询所有age不在[20, 30]中的 age__not__in=[20, 30]\nin – value is in list (a list of values should be provided)\nnin – value is not in list (a list of values should be provided)\nmod – value % x == y, where x and y are two provided values\nall – every item in list of values provided is in array\nsize – the size of the array is\nexists – value for field exists\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("exact – string field exactly matches value\niexact – string field exactly matches value (case insensitive)\ncontains – string field contains value\nicontains – string field contains value (case insensitive)\nstartswith – string field starts with value\nistartswith – string field starts with value (case insensitive)\nendswith – string field ends with value\niendswith – string field ends with value (case insensitive)\nmatch – performs an $elemMatch so you can match an entire document within an array\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("使用pyMongo的原生查询，document.objects("),t("strong",[this._v("raw")]),this._v("={'name': 'liuzhi'})")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("class BlogPost(Document):\n    title = StringField()\n    date = DateTimeField()\n\n    @queryset_manager\n    def objects(doc_cls, queryset):\n        # This may actually also be done by defining a default ordering for\n        # the document, but this illustrates the use of manager methods\n        return queryset.order_by('-date')\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("class AwesomerQuerySet(QuerySet):\n\n    def get_awesome(self):\n        return self.filter(awesome=True)\n\nclass Page(Document):\n    meta = {'queryset_class': AwesomerQuerySet}\n\n# To call:\nPage.objects.get_awesome()\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("count() 返回\bQuerySet() 数目")]),this._v(" "),t("li",[this._v("sun('quantitu') 求和")]),this._v(" "),t("li",[this._v("average() 求平均")])])}],!1,null,null,null);a.options.__file="MongoEngine.md";t.default=a.exports}}]);