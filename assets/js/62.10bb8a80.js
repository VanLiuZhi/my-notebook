(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{513:function(t,v,e){"use strict";e.r(v);var i=e(1),n=Object(i.a)({},function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"python-虚拟环境"}},[t._v("python 虚拟环境")]),t._v(" "),e("p",[t._v("使用虚拟环境是很有必要的，在windows和Linux上还是有区别的。")]),t._v(" "),e("h2",{attrs:{id:"linux-python-virtualenv"}},[t._v("Linux python virtualenv")]),t._v(" "),e("p",[t._v("大致和windows上是一样的，安装virtualenv")]),t._v(" "),e("p",[t._v("virtualenv -p 解释器目录 virtual目录")]),t._v(" "),e("p",[t._v("ls /usr/bin/python*  一般现在的linux都有python3，在这里指定解释器就可以了，没有就装一个")]),t._v(" "),e("p",[t._v("source py34env/bin/activate  激活")]),t._v(" "),e("p",[t._v("deactivate  退出")]),t._v(" "),e("p",[t._v("windows上的虚拟环境还是不能直接在linux上用，虽然可以跑，但是创建这个虚拟环境的时候是指定了解释器的，直接跑解释器不对，包的内容和版本也不对，所以还是在linux上创建虚拟环境吧。")]),t._v(" "),e("h2",{attrs:{id:"virtualenvwrapper"}},[t._v("virtualenvwrapper")]),t._v(" "),e("p",[t._v("virtualenvwrapper 是对virtualenv的扩展，利用它管理虚拟环境，最好的特征就是直接用命令就可以进入虚拟环境，不用像原来一样需要切换到目录下进入。"),e("a",{attrs:{href:"https://www.jianshu.com/p/9f47a9801329",target:"_blank",rel:"noopener noreferrer"}},[t._v("简书"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("基本命令")]),t._v(" "),e("p",[t._v("workon   查看虚拟环境")]),t._v(" "),e("p",[t._v("workon  环境名称  进入对应虚拟环境")]),t._v(" "),e("p",[t._v("deactivate 退出环境")]),t._v(" "),e("p",[t._v("export WORKON_HOME=/  环境安装路径")]),t._v(" "),e("p",[t._v("export VIRTUALENVWRAPPER_PATHON= /  python解释器路径")]),t._v(" "),e("p",[t._v("source  /  virtualenvwrapper.sh  路径")]),t._v(" "),e("p",[t._v("我的流程： pip 安装  virtualenvwrapper  virtualenv  配置  ~/.bash_profile 为上面内容  把virtualenv添加符号链接")]),t._v(" "),e("p",[t._v("source ~/.bash_profile(激活环境变量，让workon命令可以被执行到，仅本次登陆有效)")]),t._v(" "),e("h2",{attrs:{id:"anaconda"}},[t._v("Anaconda")]),t._v(" "),e("p",[t._v("该软件有新的包管理工具 conda 这个不仅是python，是一个其它语言也可以用的包管理工具。用conda命令安装的python包，会去寻找相关依赖，提示你需要安装依赖，并一起安装。而pip虽然也会连同依赖一起装（听说没有conda好），但是有些包不会（猜测依赖的机制是包自身的，有些第三方包没有做这个处理，导致你安装了后，运行报错还要去装其它的，个人猜测）。")]),t._v(" "),t._m(0),t._v(" "),e("p",[t._v("虽然用了conda，但是还是有一些包没法安装，还得用pip安装（猜测是一些个人写的包，不出名，没在conda上记录，或者就是单纯的没有记录）conda 和 pip ，conda可以管理pip和自己安装的包（用conda list查看），pip好像不行，只能管理自己的。")]),t._v(" "),e("p",[t._v("关于安装的时候是否选择添加到path，如果你电脑已经有了python，就不要选了。选了这个直接在命令行输入python，就会使用Anaconda的虚拟环境。")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),e("p",[t._v("心得：Anaconda也用了一段时间，感觉并没有网上说的那么强大，对于一些科学计算，或者说是由其它语言编写，Python来调用的那种包，对，就是那种很高端的，是可以用conda安装管理的，但是像一些小包，尤其是纯Python写的，只有pip才能安装，这样你还是摆脱不了pip，重点软件非常大，太大了，比较适合做开发用，数据分析方向用。")]),t._v(" "),e("h2",{attrs:{id:"pipenv"}},[t._v("pipenv")]),t._v(" "),t._m(3),t._v(" "),e("p",[t._v("Pipfile & Pipfile.lock：")]),t._v(" "),e("p",[t._v("Pipfile是用来代替原来的requirements.txt的，source部分用来设置仓库地址，packages部分用来指定项目依赖的包，dev-packages部分用来指定开发环境需要的包，这样分开便于管理。而Pipfile.lock中记录了当前环境中安装的依赖的版本号以及哈希，以保证每次装出来的依赖都是一致的。")]),t._v(" "),t._m(4),t._v(" "),e("p",[t._v("在 Dockerfile 中安装依赖，加--system参数表示使用 pip 直接安装相应依赖，不创建虚拟环境。")]),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),e("p",[t._v("关于IDE支持：pycharm中，最新版本已经支持了，然而我用的mac版试了还是不行，而且我看源码的执行文件，明确说明不能直接执行此文件，这就很尴尬了，从使用virtualenv的经验来看，配置操作是没问题的，而且我查了官方文档，发现官方的情况和我的不符合。我推测是Windows环境的版本才支持，可能mac版还不行（但是软件中是有配置项，这就很尴尬了，暂时使用常规虚拟环境配置吧）。")])])},[function(){var t=this.$createElement,v=this._self._c||t;return v("p",[v("code",[this._v("conda env export > environment.yaml")]),this._v(" 命令导出当前虚拟环境，可以用这个文件恢复虚拟环境。这个文件中有一个pip相关的信息，记录了该环境用pip安装的包。")])},function(){var t=this.$createElement,v=this._self._c||t;return v("p",[this._v("在新的虚拟环境中执行 "),v("code",[this._v("pip install -r requirements.txt")]),this._v(" 导入pip安装的包")])},function(){var t=this.$createElement,v=this._self._c||t;return v("ul",[v("li",[this._v("activate 环境名称：进入对应环境")]),this._v(" "),v("li",[this._v("conda env list：列出当前环境")]),this._v(" "),v("li",[this._v("mac下进入环境，前面加 source")])])},function(){var t=this.$createElement,v=this._self._c||t;return v("p",[this._v("又是一个新的虚拟环境工具，相比virtualenv功能上更加强大，由于是较新的工具，设计上考虑就比较全面。通过pip install来安装，在项目对应目录执行 "),v("code",[this._v("pipenv install --dev")]),this._v(" 使用系统Python版本来为此项目创建虚拟环境，生成Pipfile，Pipfile.lock文件。使用 "),v("code",[this._v("pipenv python 3.6")]),this._v(" 的形式指定版本。通过帮助可以查看更多命令。")])},function(){var t=this.$createElement,v=this._self._c||t;return v("p",[v("code",[this._v("pipenv install --dev")]),this._v(" 用来安装当前项目中dev-packages中的包，没有环境的会创建虚拟环境。")])},function(){var t=this.$createElement,v=this._self._c||t;return v("p",[v("code",[this._v("RUN pipenv install --deploy --system")])])},function(){var t=this.$createElement,v=this._self._c||t;return v("p",[v("code",[this._v("pipenv install --dev django")]),this._v("，"),v("code",[this._v("pipenv install django")]),this._v(" 安装django包，第一种安装在dev-packages里面，这样在部署的时候通过 "),v("code",[this._v("pipenv install")]),this._v(" 安装，只会安装packages里面的，把开发环境的包过滤了，这很有用，要全部安装，应该 "),v("code",[this._v("pipenv insyall --dev")])])},function(){var t=this.$createElement,v=this._self._c||t;return v("p",[this._v("在项目目录中编写 "),v("code",[this._v(".env")]),this._v("，可以在进入虚拟环境后，把env文件中的环境变量加载，这个就很有用了")])}],!1,null,null,null);n.options.__file="virtualenv.md";v.default=n.exports}}]);