(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{474:function(t,i,_){"use strict";_.r(i);var v=_(1),e=Object(v.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,i=t.$createElement,_=t._self._c||i;return _("div",{staticClass:"content"},[_("h1",{attrs:{id:"git"}},[t._v("Git")]),t._v(" "),_("p",[t._v("使用GitHub，给出的地址我们一般用ssh。使用ssh需要https，如果不支持只能使用http，但是每次都要输口令。")]),t._v(" "),_("h2",{attrs:{id:"分支"}},[t._v("分支")]),t._v(" "),_("p",[t._v("Git鼓励大量使用分支：")]),t._v(" "),_("ul",[_("li",[t._v("查看分支：git branch")]),t._v(" "),_("li",[t._v("创建分支：git branch <name>")]),t._v(" "),_("li",[t._v("切换分支：git checkout <name>")]),t._v(" "),_("li",[t._v("创建+切换分支：git checkout -b <name>")]),t._v(" "),_("li",[t._v("合并某分支到当前分支：git merge <name>")]),t._v(" "),_("li",[t._v("删除分支：git branch -d <name>")])]),t._v(" "),_("p",[t._v("主要理解分支，克隆远程仓库，将本地和远程仓库关联，搭建git服务器")]),t._v(" "),_("h2",{attrs:{id:"git-pull-命令"}},[t._v("git pull 命令")]),t._v(" "),_("p",[t._v("作用：取回远程主机某个分支的更新，再与本地的指定分支合并")]),t._v(" "),_("p",[t._v("格式：git pull  <远程主机名> <远程分支名>:<本地分支名>")]),t._v(" "),_("ol",[_("li",[t._v("如果与当前分支合并，则可省略本地分支名git pull <远程主机名> <远程分支名> 相当于：git fetch <远程主机名> <远分支名> git merge <远程主机名>/<远程分支名>")]),t._v(" "),_("li",[t._v("如果当前分支与远程分支存在追踪关系 git pull <远程主机名>")]),t._v(" "),_("li",[t._v("如果当前分支只有一个追踪关系 git pull")]),t._v(" "),_("li",[t._v("手动建立追踪关系 git branch --set-upstream master origin/next")]),t._v(" "),_("li",[t._v("清理远程已删除本地还存在的分支 git fetch --prune origin 或者 git fetch -p 或者 git pull -p")])]),t._v(" "),_("h2",{attrs:{id:"如何上传github"}},[t._v("如何上传GitHub")]),t._v(" "),_("ol",[_("li",[t._v("在用户目录下 .ssh")]),t._v(" "),_("li",[t._v('ssh-keygen -t rsa -C "1441765847@qq.com"')]),t._v(" "),_("li",[t._v("把 id_rsa.pub  添加到GitHub的ssh上")]),t._v(" "),_("li",[t._v("git init  把当前目录变为仓库")]),t._v(" "),_("li",[t._v("git add  把文件添加进仓库  git commit 把文件提交到仓库")]),t._v(" "),_("li",[t._v("git add --all 当我们在一个不是空目录下init需要把所有文件添加到仓库的时候使用")])]),t._v(" "),_("h2",{attrs:{id:"文件的标记解释："}},[t._v("文件的标记解释：")]),t._v(" "),_("pre",[_("code",[t._v(" A: 你本地新增的文件（服务器上没有）.\n\n C: 文件的一个新拷贝.\n\n D: 你本地删除的文件（服务器上还在）.\n\n M: 文件的内容或者mode被修改了.\n\n R: 文件名被修改了。\n\n T: 文件的类型被修改了。\n\n U: 文件没有被合并(你需要完成合并才能进行提交)。\n\n X: 未知状态(很可能是遇到git的bug了，你可以向git提交bug report)。\n")])]),t._v(" "),_("p",[t._v("git pull")]),t._v(" "),_("p",[t._v("git pull origin master")]),t._v(" "),_("p",[t._v("git pull origin master\n--allow-unrelated-histories")]),t._v(" "),_("h2",{attrs:{id:"git的hook-钩子"}},[t._v("git的hook(钩子)")]),t._v(" "),_("p",[t._v("为了防止一些不规范的代码 "),_("code",[t._v("commit")]),t._v(" 并 "),_("code",[t._v("push")]),t._v(" 到远端，我们可以在  "),_("code",[t._v("git")]),t._v(" 命令执行前用一些钩子来检测并阻止。\n在node中，安装需要的模块："),_("code",[t._v("husky")]),t._v(", "),_("code",[t._v("pre-commit")]),t._v(" 配置package.json在提交代码前执行自定义的脚本。")]),t._v(" "),_("div",{staticClass:"language-sh extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("cd .git/hooks\nls -l\n")])])]),_("p",[t._v("该目录提供了git的各个钩子的脚步案例。")])])}],!1,null,null,null);e.options.__file="git-command.md";i.default=e.exports}}]);