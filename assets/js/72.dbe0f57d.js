(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{523:function(e,n,r){"use strict";r.r(n);var t=r(1),o=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,n=e.$createElement,r=e._self._c||n;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"https-ssl-证书"}},[e._v("https ssl 证书")]),e._v(" "),r("p",[e._v("使用https协议需要证书，可以自己创建，不足之处是不被认可，加密效果是一样的。以下内容截取自网络。")]),e._v(" "),r("p",[e._v("需要依次输入国家，地区，组织，email。最重要的是有一个common name，可以写你的名字或者域名。如果为了https申请，这个必须和域名吻合，否则会引发浏览器警报。生成的csr文件交给CA签名后形成服务端自己的证书。")]),e._v(" "),r("p",[e._v("创建自签名证书的步骤\n注意：以下步骤仅用于配置内部使用或测试需要的SSL证书。\n第1步：生成私钥使用openssl工具生成一个RSA私钥\n$ openssl genrsa -des3 -out server.key 2048\n说明：生成rsa私钥，des3算法，2048位强度，server.key是秘钥文件名。\n注意：生成私钥，需要提供一个至少4位的密码。\n第2步：生成CSR（证书签名请求）生成私钥之后，便可以创建csr文件了。\n此时可以有两种选择。理想情况下，可以将证书发送给证书颁发机构（CA），CA验证过请求者的身份之后，会出具签名证书（很贵）。另外，如果只是内部或者测试需求，也可以使用OpenSSL实现自签名，具体操作如下：")]),e._v(" "),r("p",[e._v("$ openssl req -new -key server.key -out server.csr\n说明：需要依次输入国家，地区，城市，组织，组织单位，Common Name和Email。其中Common Name，可以写自己的名字或者域名，如果要支持https，Common Name应该与域名保持一致，否则会引起浏览器警告。")]),e._v(" "),r("p",[e._v("Country Name (2 letter code) [AU]:CN\nState or Province Name (full name) [Some-State]:Beijing\nLocality Name (eg, city) []:Beijing\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:joyios\nOrganizational Unit Name (eg, section) []:info technology\nCommon Name (e.g. server FQDN or YOUR name) []:demo.joyios.com\nEmail Address []:liufan@joyios.com")]),e._v(" "),r("p",[e._v("第3步：删除私钥中的密码在第1步创建私钥的过程中，由于必须要指定一个密码。而这个密码会带来一个副作用，那就是在每次Apache启动Web服务器时，都会要求输入密码，这显然非常不方便。要删除私钥中的密码，操作如下：")]),e._v(" "),r("p",[e._v("cp server.key server.key.org\nopenssl rsa -in server.key.org -out server.key")]),e._v(" "),r("p",[e._v("第4步：生成自签名证书如果你不想花钱让CA签名，或者只是测试SSL的具体实现。那么，现在便可以着手生成一个自签名的证书了。")]),e._v(" "),r("p",[e._v("$ openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt\n说明：crt上有证书持有人的信息，持有人的公钥，以及签署者的签名等信息。当用户安装了证书之后，便意味着信任了这份证书，同时拥有了其中的公钥。证书上会说明用途，例如服务器认证，客户端认证，或者签署其他证书。当系统收到一份新的证书的时候，证书会说明，是由谁签署的。如果这个签署者确实可以签署其他证书，并且收到证书上的签名和签署者的公钥可以对上的时候，系统就自动信任新的证书。\n第5步：安装私钥和证书将私钥和证书文件复制到Apache的配置目录下即可，在Mac 10.10系统中，复制到/etc/apache2/目录中即可。\n需要注意的是，在使用自签名证书时，浏览器会提示证书不受信任，如果你是对外网站使用，建议还是去CA机构申请可信的SSL证书，现在证书也很便宜，沃通CA超快SSL Pre才488元/年。")]),e._v(" "),r("p",[e._v("一般情况下，如果能找到可用的证书，就可以直接使用，只不过会因证书的某些信息不正确或与部署证书的主机不匹配而导致浏览器提示证书无效，但这并不影响使用。\n需要手工生成证书的情况有：\n找不到可用的证书\n需要配置双向SSL，但缺少客户端证书\n需要对证书作特别的定制\n首先，无论是在Linux下还是在Windows下的Cygwin中，进行下面的操作前都须确认已安装OpenSSL软件包。")]),e._v(" "),r("ol",[r("li",[e._v("创建根证书密钥文件(自己做CA)root.key：\nopenssl genrsa -des3 -out root.key\n输出内容为：\n[lenin@archer ~]$ openssl genrsa -des3 -out root.key\nGenerating RSA private key, 512 bit long modulus\n……………..++++++++++++\n..++++++++++++\ne is 65537 (0×10001)\nEnter pass phrase for root.key: ← 输入一个新密码\nVerifying – Enter pass phrase for root.key: ← 重新输入一遍密码")]),e._v(" "),r("li",[e._v("创建根证书的申请文件root.csr：\nopenssl req -new -key root.key -out root.csr\n输出内容为：\n[lenin@archer ~]$ openssl req -new -key root.key -out root.csr\nEnter pass phrase for root.key: ← 输入前面创建的密码\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter ‘.’, the field will be left blank.\n—–\nCountry Name (2 letter code) [AU]:CN ← 国家代号，中国输入CN\nState or Province Name (full name) [Some-State]:BeiJing ← 省的全名，拼音\nLocality Name (eg, city) []:BeiJing ← 市的全名，拼音\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:MyCompany Corp. ← 公司英文名\nOrganizational Unit Name (eg, section) []: ← 可以不输入\nCommon Name (eg, YOUR name) []: ← 此时不输入\nEmail Address []:admin@mycompany.com ← 电子邮箱，可随意填\nPlease enter the following ‘extra’ attributes\nto be sent with your certificate request\nA challenge password []: ← 可以不输入\nAn optional company name []: ← 可以不输入")]),e._v(" "),r("li",[e._v("创建一个自当前日期起为期十年的根证书root.crt：\nopenssl x509 -req -days 3650 -sha1 -extensions v3_ca -signkey root.key -in root.req -out root.crt\n输出内容为：\n[lenin@archer ~]$ openssl x509 -req -days 3650 -sha1 -extensions v3_ca -signkey root.key -in root.csr -out root.crt\nSignature ok\nsubject=/C=CN/ST=BeiJing/L=BeiJing/O=MyCompany Corp./emailAddress=admin@mycompany.com\nGetting Private key\nEnter pass phrase for root.key: ← 输入前面创建的密码")]),e._v(" "),r("li",[e._v("创建服务器证书密钥server.key：\nopenssl genrsa –des3 -out server.key 2048\n输出内容为：\n[lenin@archer ~]$ openssl genrsa -out server.key 2048\nGenerating RSA private key, 2048 bit long modulus\n….+++\n…………………………………………..+++\ne is 65537 (0×10001)\n运行时会提示输入密码,此密码用于加密key文件(参数des3便是指加密算法,当然也可以选用其他你认为安全的算法.),以后每当需读取此文件(通过openssl提供的命令或API)都需输入口令.如果觉得不方便,也可以去除这个口令,但一定要采取其他的保护措施!\n去除key文件口令的命令:\nopenssl rsa -in server.key -out server.key\n5.创建服务器证书的申请文件server.csr：\nopenssl req -new -key server.key -out server.csr\n输出内容为：\n[lenin@archer ~]$ openssl req -new -key server.key -out server.req\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter ‘.’, the field will be left blank.\n—–\nCountry Name (2 letter code) [AU]:CN ← 国家名称，中国输入CN\nState or Province Name (full name) [Some-State]:BeiJing ← 省名，拼音\nLocality Name (eg, city) []:BeiJing ← 市名，拼音\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:MyCompany Corp. ← 公司英文名\nOrganizational Unit Name (eg, section) []: ← 可以不输入\nCommon Name (eg, YOUR name) []:www.mycompany.com ← 服务器主机名，若填写不正确，浏览器会报告证书无效，但并不影响使用\nEmail Address []:admin@mycompany.com ← 电子邮箱，可随便填\nPlease enter the following ‘extra’ attributes\nto be sent with your certificate request\nA challenge password []: ← 可以不输入\nAn optional company name []: ← 可以不输入")]),e._v(" "),r("li",[e._v("创建自当前日期起有效期为期两年的服务器证书server.crt：\nopenssl x509 -req -days 730 -sha1 -extensions v3_req -CA root.crt -CAkey root.key -CAserial root.srl -CAcreateserial -in server.csr -out server.crt\n输出内容为：\n[lenin@archer ~]$ openssl x509 -req -days 730 -sha1 -extensions v3_req -CA root.crt -CAkey root.key -CAcreateserial -in server.csr -out server.crt\nSignature ok\nsubject=/C=CN/ST=BeiJing/L=BeiJing/O=MyCompany Corp./CN=www.mycompany.com/emailAddress=admin@mycompany.com\nGetting CA Private Key\nEnter pass phrase for root.key: ← 输入前面创建的密码")]),e._v(" "),r("li",[e._v("创建客户端证书密钥文件client.key：\nopenssl genrsa -des3 -out client.key 2048\n输出内容为：\n[lenin@archer ~]$ openssl genrsa -des3 -out client.key 2048\nGenerating RSA private key, 2048 bit long modulus\n……………………………………………………………………………..+++\n……………………………………………………………………………………………………….+++\ne is 65537 (0×10001)\nEnter pass phrase for client.key: ← 输入一个新密码\nVerifying – Enter pass phrase for client.key: ← 重新输入一遍密码")]),e._v(" "),r("li",[e._v("创建客户端证书的申请文件client.csr：\nopenssl req -new -key client.key -out client.csr\n输出内容为：\n[lenin@archer ~]$ openssl req -new -key client.key -out client.csr\nEnter pass phrase for client.key: ← 输入上一步中创建的密码\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter ‘.’, the field will be left blank.\n—–\nCountry Name (2 letter code) [AU]:CN ← 国家名称，中国输入CN\nState or Province Name (full name) [Some-State]:BeiJing ← 省名称，拼音\nLocality Name (eg, city) []:BeiJing ← 市名称，拼音\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:MyCompany Corp. ← 公司英文名\nOrganizational Unit Name (eg, section) []: ← 可以不填\nCommon Name (eg, YOUR name) []:Lenin ← 自己的英文名，可以随便填\nEmail Address []:admin@mycompany.com ← 电子邮箱，可以随便填\nPlease enter the following ‘extra’ attributes\nto be sent with your certificate request\nA challenge password []: ← 可以不填\nAn optional company name []: ← 可以不填")]),e._v(" "),r("li",[e._v("创建一个自当前日期起有效期为两年的客户端证书client.crt：\nopenssl x509 -req -days 730 -sha1 -extensions v3_req -CA root.crt -CAkey root.key -CAserial root.srl -CAcreateserial -in client.csr -out client.crt\n输出内容为：\n[lenin@archer ~]$ openssl x509 -req -days 730 -sha1 -extensions v3_req -CA root.crt -CAkey root.key -CAcreateserial -in client.csr -out client.crt\nSignature ok\nsubject=/C=CN/ST=BeiJing/L=BeiJing/O=MyCompany Corp./CN=www.mycompany.com/emailAddress=admin@mycompany.com\nGetting CA Private Key\nEnter pass phrase for root.key: ← 输入上面创建的密码")]),e._v(" "),r("li",[e._v("将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx：\nopenssl pkcs12 -export -in client.crt -inkey client.key -out client.pfx\n输出内容为：\n[lenin@archer ~]$ openssl pkcs12 -export -in client.crt -inkey client.key -out client.pfx\nEnter pass phrase for client.key: ← 输入上面创建的密码\nEnter Export Password: ← 输入一个新的密码，用作客户端证书的保护密码，在客户端安装证书时需要输入此密码\nVerifying – Enter Export Password: ← 确认密码")]),e._v(" "),r("li",[e._v("保存生成的文件备用，其中server.crt和server.key是配置单向SSL时需要使用的证书文件，client.crt是配置双向SSL时需要使用的证书文件，client.pfx是配置双向SSL时需要客户端安装的证书文件\n.crt文件和.key可以合到一个文件里面，把2个文件合成了一个.pem文件（直接拷贝过去就行了）\n参考：http://sinolog.it/?p=1460\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\nhttp://blog.sina.com.cn/s/blog_4fd50c390101891c.html\nx509证书一般会用到三类文，key，csr，crt。\nKey是私用密钥openssl格，通常是rsa算法。\nCsr是证书请求文件，用于申请证书。在制作csr文件的时，必须使用自己的私钥来签署申，还可以设定一个密钥。\ncrt是CA认证后的证书文，（windows下面的，其实是crt），签署人用自己的key给你签署的凭证。")])]),e._v(" "),r("p",[e._v("1.key的生成\nopensslgenrsa -des3 -out server.key 2048\n这样是生成rsa私钥，des3算法，openssl格式，2048位强度。server.key是密钥文件名。为了生成这样的密钥，需要一个至少四位的密码。可以通过以下方法生成没有密码的key:\nopensslrsa -in server.key -out server.key")]),e._v(" "),r("p",[e._v("server.key就是没有密码的版本了。")]),e._v(" "),r("p",[e._v("2.生成CA的crt\nopensslreq -new -x509 -key server.key -out ca.crt -days3650\n生成的ca.crt文件是用来签署下面的server.csr文件。")]),e._v(" "),r("p",[e._v("3.csr的生成方法\nopensslreq -new -key server.key -outserver.csr\n需要依次输入国家，地区，组织，email。最重要的是有一个common name，可以写你的名字或者域名。如果为了https申请，这个必须和域名吻合，否则会引发浏览器警报。生成的csr文件交给CA签名后形成服务端自己的证书。")]),e._v(" "),r("p",[e._v("4.crt生成方法\nCSR文件必须有CA的签名才可形成证书，可将此文件发送到verisign等地方由它验证，要交一大笔钱，何不自己做CA呢。\nopensslx509 -req -days 3650 -in server.csr -CA ca.crt -CAkey server.key-CAcreateserial -out server.crt\n输入key的密钥后，完成证书生成。-CA选项指明用于被签名的csr证书，-CAkey选项指明用于签名的密钥，-CAserial指明序列号文件，而-CAcreateserial指明文件不存在时自动生成。\n最后生成了私用密钥：server.key和自己认证的SSL证书：server.crt\n证书合并：\ncatserver.key server.crt > server.pem")])])}],!1,null,null,null);o.options.__file="ssl-credential.md";n.default=o.exports}}]);