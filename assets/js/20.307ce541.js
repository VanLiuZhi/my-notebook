(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{471:function(n,e,r){"use strict";r.r(e);var t=r(1),i=Object(t.a)({},function(){var n=this,e=n.$createElement,r=n._self._c||e;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"算法"}},[n._v("算法")]),n._v(" "),n._m(0),n._v(" "),r("h2",{attrs:{id:"聚合"}},[n._v("聚合")]),n._v(" "),n._m(1),n._v(" "),r("p",[n._v("利用字典在原引用修改的特性，把数据进行聚合分组，每次循环都会根据唯一键从临时数据字典dict处取出要聚合到这个key对应的字典中，然后对其进行操作。")]),n._v(" "),r("h2",{attrs:{id:"找出数组中，只出现一次的两个数字"}},[n._v("找出数组中，只出现一次的两个数字")]),n._v(" "),r("p",[n._v("list = [2, 4, 3, 6, 3, 2, 5, 5]")]),n._v(" "),r("p",[n._v("核心思路：")]),n._v(" "),r("p",[n._v("1、数组中全部数据异或操作后，依次对数组中的每个元素进行异或（相同位为0，不同为1）操作，得到0000 0010。")]),n._v(" "),r("p",[n._v("2、倒数第二位是1，说明我们要找的那两个只出现一次的数字，倒数第二位是不同的。(会出现不同，是因为这两个数不同，所以至少有一位是不同的)")]),n._v(" "),r("p",[n._v("3、下面根据每个数二进制倒数第二位是不是1来分成两组，倒数第二位为1的是{2, 3, 6, 3, 2}，倒数第二位为0的是{4, 5, 5}。")]),n._v(" "),r("p",[n._v("4、接下来对这两个数组分别进行异或操作，剩下的数字就是只出现一次的数字。")]),n._v(" "),r("p",[n._v("为什么分组可以实现：因为4，6是不同的两个数，它们二进制的至少某一位是不同的（记为N位），所以把这位是1的分在一起，试想所有的数在N位不同的是4或6中的一个，加上其它的数，其它的数都是成对的，所有其它的数也只会分成两组（其它的数N位同样只会是1或0），一组包含4和多个重复的数，一组包含6和多个重复的数，重复的数是可以消去的。")]),n._v(" "),r("h2",{attrs:{id:"a-b-问题"}},[n._v("A + B 问题")]),n._v(" "),r("p",[n._v("给出两个整数 aa 和 bb , 求他们的和。")]),n._v(" "),n._m(2),n._v(" "),r("p",[n._v("思路：运用位运算模拟加法")]),n._v(" "),r("highlight-code",{attrs:{lang:"python"}},[r("pre",[r("code",[n._v('class Solution:\n    """\n    @param a: An integer\n    @param b: An integer\n    @return: The sum of a and b \n    """\n    def aplusb(self, a, b):\n        # write your code here\n        if a == -b:\n            return 0\n        else:\n            while b != 0:\n                a, b = a ^ b, (a & b) << 1\n                # 每次去算进位的地方，进位的和a一直相加\n            return a\n')])])]),n._v(" "),r("p",[n._v("主要利用异或运算来完成")]),n._v(" "),n._m(3),n._v(" "),r("h2",{attrs:{id:"冒泡排序"}},[n._v("冒泡排序")]),n._v(" "),r("highlight-code",{attrs:{lang:"python"}},[r("pre",[r("code",[n._v("def bubbleSort(relist):\n    len_ = len(relist)\n    for i in range(len_):\n        for j in range(0, len_ - i - 1):\n            if relist[j] > relist[j + 1]:\n                relist[j + 1], relist[j] = relist[j], relist[j + 1]\n    return relist\n\n\n# print(bubbleSort([1, 5, 2, 6, 9, 3]))\n\n\ndef bubbleSort2(inlist):\n    len_ = len(inlist)\n    for i in range(len_):\n        for j in range(len_ - i - 1):\n            if inlist[j] > inlist[j + 1]:\n                inlist[j + 1], inlist[j] = inlist[j], inlist[j + 1]\n    return inlist\n\n\n# print(bubbleSort2([1, 5, 2, 6, 9, 3]))\n")])])]),n._v(" "),r("h2",{attrs:{id:"快速排序"}},[n._v("快速排序")]),n._v(" "),r("highlight-code",{attrs:{lang:"python"}},[r("pre",[r("code",[n._v("def quickSort(array):\n    if len(array) < 2:\n        return array\n    else:\n        pivot = array[0]\n        less = [i for i in array[1:] if i < pivot]\n        greater = [j for j in array[1:] if j > pivot]\n        return quickSort(less) + [pivot] + quickSort(greater)\n\n\nprint(quickSort([1, 5, 2, 6, 9, 3]))\n\n# 快排 分片的思想+递归的思想，这是取了第一个为基准值，栈高为O(log(n)),栈长O(n),所以运行时间为栈高x栈长，也就是算法平均运算时间为O(nlog(n))\ndef quickSort2(array):\n    if len(array) < 2:\n        return array\n    else:\n        piovt = array[0]\n        less = [i for i in array[1:] if i< piovt]\n        greater = [j for j in array[1:] if j>piovt]\n        return quickSort2(less) + [piovt] + quickSort2(greater)\n\nprint(quickSort2([1, 5, 2, 6, 9, 3]))\n")])])]),n._v(" "),r("h2",{attrs:{id:"范围内的质数"}},[n._v("范围内的质数")]),n._v(" "),r("highlight-code",{attrs:{lang:"python"}},[r("pre",[r("code",[n._v("def func():\n    res = []\n    for i in range(1, 101):\n        if compute(i):\n            pass\n        else:\n            res.append(i)\n    return res\n\n\ndef compute(value):\n    flag = False\n    if value <= 2:\n        return False\n    for i in range(2, value - 1):\n        r = value % i\n        if not r:\n            flag = True\n    return flag\n\nprint(func())\n")])])]),n._v(" "),r("h2",{attrs:{id:"二叉数遍历"}},[n._v("二叉数遍历")]),n._v(" "),r("highlight-code",{attrs:{lang:"python"}},[r("pre",[r("code",[n._v('class BinaryTreeNode(object):\n    def __init__(self, data=None, left=None, right=None):\n        self.data = data\n        self.left = left\n        self.right = right\n\n\nclass BinaryTree(object):\n    """docstring for BinaryTree"""\n\n    def __init__(self, root=None):\n        self.root = root\n\n    def is_empty(self):\n        return self.root == None\n\n    def preOrder(self, this_Node):\n        if this_Node == None:\n            return\n        print(this_Node.data)\n        self.preOrder(this_Node.left)\n        self.preOrder(this_Node.right)\n\n    def inOrder(self, this_Node):\n        if this_Node == None:\n            return\n        self.inOrder(this_Node.left)\n\n        print(this_Node.data)\n        self.inOrder(this_Node.right)\n\n    def postOrder(self, this_Node):\n        if this_Node == None:\n            return\n        self.postOrder(this_Node.left)\n        self.postOrder(this_Node.right)\n        print(this_Node.data)\n\n    def levelOrder(self, this_Node):\n        if this_Node == None:\n            return\n        _queue = []\n        _queue.append(this_Node)\n        while _queue:\n            node = _queue.pop(0)\n            print(node.data)\n            if node.left != None:\n                _queue.append(node.left)\n            if node.right != None:\n                _queue.append(node.right)\n\n    def deep(self, root):\n        if not root:\n            return\n        print(root.data)\n        self.deep(root.left)\n        self.deep(root.right)\n\n    def deepTree(self, root):\n        if root == None:\n            return 0\n        ld = self.deepTree(root.left)\n        rd = self.deepTree(root.right)\n        return max(ld, rd) + 1\n\n\nn1 = BinaryTreeNode(data="D")\nn2 = BinaryTreeNode(data="E")\nn3 = BinaryTreeNode(data="F")\nn4 = BinaryTreeNode(data="B", left=n1, right=n2)\nn5 = BinaryTreeNode(data="C", left=n3, right=None)\nroot = BinaryTreeNode(data="A", left=n4, right=n5)\n\nbt = BinaryTree(root)\n\nbt = BinaryTree(root)\n# print(\'先序遍历\')\n# bt.preOrder(bt.root)\n# print(\'中序遍历\')\n# bt.inOrder(bt.root)\n# print(\'后序遍历\')\n# bt.postOrder(bt.root)\nbt.levelOrder(root)\n\n# print bt.deepTree(bt.root)\n')])])]),n._v(" "),r("h2",{attrs:{id:"斐波那契数列"}},[n._v("斐波那契数列")]),n._v(" "),r("highlight-code",{attrs:{lang:"python"}},[r("pre",[r("code",[n._v("def flb(num):\n    result = None\n    n, a, b = 0, 0, 1\n    while n < num:\n        print(b)\n        result = b\n        a, b = b, a + b\n        n += 1\n    return result\n\n\na = flb(6)\nprint(a)\n")])])]),n._v(" "),r("h2",{attrs:{id:"跳台阶"}},[n._v("跳台阶")]),n._v(" "),r("highlight-code",{attrs:{lang:"python"}},[r("pre",[r("code",[n._v("# def jump_floor(number):\n#     if number <= 2:\n#         return number\n#     prev, curr = 1, 2\n#     for _ in range(3, number + 1):\n#         prev, curr = curr, prev + curr\n#         print(curr)\n#     return curr\n\n\n# print(jump_floor(5))\n\n\ndef jump(time):\n    if time <= 2:\n        return time\n    a, b = 1, 2\n    for i in range(3, time + 1):\n        a, b = b, a + b\n    return b\n\n\n# print(jump(6))\n\n\n# def jumpm(time):\n#     if time == 0:\n#         return 0\n#     return 2 ** (time - 1)\n#\n#\n# fff = lambda a: a if a <= 2 else (fff(a - 1) + fff(a - 2))\n#\n# print(fff(6))\n")])])])],1)},[function(){var n=this,e=n.$createElement,r=n._self._c||e;return r("ul",[r("li",[n._v("有穷性(Finiteness)\n算法的有穷性是指算法必须能在执行有限个步骤之后终止；")]),n._v(" "),r("li",[n._v("确切性(Definiteness)\n算法的每一步骤必须有确切的定义；")]),n._v(" "),r("li",[n._v("输入项(Input)\n一个算法有0个或多个输入，以刻画运算对象的初始情况，所谓0个输入是指算法本身定出了初始条件；")]),n._v(" "),r("li",[n._v("输出项(Output)\n一个算法有一个或多个输出，以反映对输入数据加工后的结果。没有输出的算法是毫无意义的；")]),n._v(" "),r("li",[n._v("可行性(Effectiveness)\n算法中执行的任何计算步骤都是可以被分解为基本的可执行的操作步，即每个计算步都可以在有限时间内完成（也称之为有效性）。")])])},function(){var n=this,e=n.$createElement,r=n._self._c||e;return r("ol",[r("li",[n._v("先准备一个dict")]),n._v(" "),r("li",[n._v("循环数据")]),n._v(" "),r("li",[n._v("准备唯一键")]),n._v(" "),r("li",[n._v("如果唯一键没在dict中，生成新的dict2")]),n._v(" "),r("li",[n._v("并且 "),r("code",[n._v("dict[key] = dict2")])]),n._v(" "),r("li",[n._v("如果在，"),r("code",[n._v("dict2 = dict[key]")])]),n._v(" "),r("li",[n._v("然后修改dict2")])])},function(){var n=this,e=n.$createElement,r=n._self._c||e;return r("ul",[r("li",[r("p",[n._v("样例\n如果 a=1 并且 b=2，返回3。")])]),n._v(" "),r("li",[r("p",[n._v("挑战\n显然你可以直接 return a + b，但是你是否可以挑战一下不这样做？（不使用++等算数运算符）")])]),n._v(" "),r("li",[r("p",[n._v("说明\na和b都是 32位 整数么？")]),n._v(" "),r("p",[n._v("是的")])]),n._v(" "),r("li",[r("p",[n._v("我可以使用位运算符么？")]),n._v(" "),r("p",[n._v("当然可以")])])])},function(){var n=this,e=n.$createElement,r=n._self._c||e;return r("ul",[r("li",[n._v("异或运算有一个别名叫做：不进位加法")]),n._v(" "),r("li",[n._v("那么a ^ b就是a和b相加之后，该进位的地方不进位的结果")]),n._v(" "),r("li",[n._v("然后下面考虑哪些地方要进位，自然是a和b里都是1的地方")]),n._v(" "),r("li",[n._v("a & b就是a和b里都是1的那些位置，a & b << 1 就是进位")]),n._v(" "),r("li",[n._v("之后的结果。所以：a + b = (a ^ b) + (a & b << 1)")]),n._v(" "),r("li",[n._v("令a' = a ^ b, b' = (a & b) << 1")]),n._v(" "),r("li",[n._v("可以知道，这个过程是在模拟加法的运算过程，进位不可能")]),n._v(" "),r("li",[n._v("一直持续，所以b最终会变为0。因此重复做上述操作就可以")]),n._v(" "),r("li",[n._v("求得a + b的值。")])])}],!1,null,null,null);i.options.__file="README.md";e.default=i.exports}}]);